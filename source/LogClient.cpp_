#include "LogClient.h"
#include "../../Framework/source/db/GraphQL.h"
#include "LogData.h"

#define var const auto
namespace Jde::Logging{

	α LogClient::CreateInstance()ε->void{
		var [applicationId, applicationInstanceId, dbLogLevel, fileLogLevel] = Data::AddInstance( "Main", IApplication::HostName(), OSApp::ProcessId() );
		auto p = ms<LogClient>( applicationId, applicationInstanceId, dbLogLevel );
		Server::Set( move(p) );
	}

	LogClient::LogClient( AppPK id, AppInstancePK applicationInstanceId, ELogLevel serverLevel )ε:
		IServerSink{ Data::LoadMessageIds() },
		_applicationId{id}{
		_instanceId = applicationInstanceId;

		Server::SetLevel( serverLevel );
		auto addMessages =[]( var& map, auto& set ){
			std::function<void(const uint32&, const string&)> fnctn = [&set](const uint32& key, const string&) {set.emplace(key);};
			map.ForEach( fnctn );
		};
		addMessages( Data::LoadFiles(), _filesSent );
		addMessages( Data::LoadFunctions(), _functionsSent );
	}

	α LogClient::GraphQLTask( string query, UserPK userPK, HCoroutine h, SL sl )ι->Task{
		try{
			auto j = awaitp( json, DB::CoQuery( move(query), userPK, "graphQL", sl ) );
			Resume( move(j), h );
		}
		catch( IException& e ){
			Resume( move(e), h );
		}
	}
	α LogClient::Log( Messages::ServerMessage& message )ι->void{
		Log( dynamic_cast<MessageBase&>(message), message.Variables );
	}
	α LogClient::Log( const MessageBase& msg )ι->void{
		vector<string> v;
		Log( msg, v );
	}
	mutex _messageMutex;//if 1st function save, 2nd will skip to insert and get fk error.
	α LogClient::Log( const MessageBase& msg, vector<string>& values )ι->void{
#ifndef TESTING
		if( msg.Level>=_webLevel )
			ApplicationServer::Web::Server().PushMessage( 0, _applicationId, _instanceId, Clock::now(), msg.Level, (uint32)msg.MessageId, (uint32)msg.FileId, (uint32)msg.FunctionId, (uint32)msg.LineNumber, (uint32)msg.UserId, msg.ThreadId, vector<string>{values} );
#endif
		try{
			unique_lock<mutex> l{ _messageMutex };
			if( ShouldSendMessage(msg.MessageId) )//2030045667
				Data::SaveString( ApplicationId(), Proto::EFields::MessageId, (uint32)msg.MessageId, make_shared<string>(msg.MessageView) );
			if( ShouldSendFile(msg.FileId) )
				Data::SaveString( ApplicationId(), Proto::EFields::FileId, (uint32)msg.FileId, make_shared<string>(msg.File) );
			if( ShouldSendFunction(msg.FunctionId) )
				Data::SaveString( ApplicationId(), Proto::EFields::FunctionId, (uint32)msg.FunctionId, make_shared<string>(msg.Function) );
			Data::PushMessage( ApplicationId(), InstanceId(), Clock::now(), msg.Level, (uint32)msg.MessageId, (uint32)msg.FileId, (uint32)msg.FunctionId, (uint32)msg.LineNumber, (uint32)msg.UserId, msg.ThreadId, move(values) );
		}
		catch( const IException& ){}
		catch( const std::exception& e ){ //Why?
			LOGX( ELogLevel::Critical, AppTag(), "{}", e.what() );
		}
	}
}
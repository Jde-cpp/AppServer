cmake_minimum_required(VERSION 3.20)
set( CMAKE_MODULE_PATH $ENV{JDE_DIR}/Public/build )
include(common)
findBoost()
if( ${VCPKG} )
	SET( CMAKE_TOOLCHAIN_FILE $ENV{REPO_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake  CACHE STRING "Vcpkg toolchain file" )
endif()
project( Jde.App.Server )
include( compiler )
#######################################################
find_package( protobuf REQUIRED )
include_directories( $ENV{JDE_DIR}/Public/include/jde/web/client/proto )
if( MSVC )
	find_package( OpenSsl REQUIRED )
	find_package( Jde REQUIRED )
	link_directories( $ENV{JDE_DIR}/installed/$<CONFIGURATION>/lib )
	link_directories( $ENV{JDE_DIR}/Public/src/app/shared/.build/.bin )
	link_directories( $ENV{JDE_DIR}/Public/src/web/server/.build/.bin )
	link_directories( $ENV{JDE_DIR}/Public/src/crypto/.build/.bin )
	link_directories( source/.build/.bin/$(ConfigurationName) )
	link_directories( $ENV{JDE_DIR}/Public/src/web/client/.build/.bin )
else()
	link_directories( ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} )
	link_directories( $ENV{REPO_DIR}/install/g++-13/asan/jsonnet/lib/ )
	link_directories( ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} )
	link_directories( ${Protobuf_DIR}/../.. )
endif()
find_package( ZLIB REQUIRED )
if( MSVC )
#	add_library( Jde SHARED IMPORTED )
#	SET_PROPERTY( TARGET Jde PROPERTY IMPORTED_LOCATION $ENV{JDE_DIR}/installed/$<CONFIGURATION>/bin/Jde.dll )
endif()
add_executable( ${CMAKE_PROJECT_NAME} )
file( GLOB sources source/main.cpp )
if( MSVC )
	list( APPEND sources source/AppServer.rc )
endif()
file( GLOB headers source/**/*.h )
target_sources( ${CMAKE_PROJECT_NAME} PRIVATE ${sources} ${headers} )

#######################################################
if( MSVC )
	include_directories( ${OPENSSL_INCLUDE_DIR} )
	find_package( fmt )
	target_link_libraries( ${CMAKE_PROJECT_NAME} fmt::fmt )
	target_link_libraries( ${CMAKE_PROJECT_NAME} Jde.App.ServerLib.lib )
	target_link_libraries( ${CMAKE_PROJECT_NAME} Jde )
	target_link_libraries( ${CMAKE_PROJECT_NAME} OpenSSL::SSL )
	set_target_properties( ${CMAKE_PROJECT_NAME} PROPERTIES VS_DEBUGGER_COMMAND_ARGUMENTS "-c" )
else()
	include_directories( "../Public" )
	target_link_libraries( ${CMAKE_PROJECT_NAME} debug libfmtd.a optimized libfmt.a )
	target_link_libraries( ${CMAKE_PROJECT_NAME} Threads::Threads )
	target_link_libraries( ${CMAKE_PROJECT_NAME} Boost::json )
	target_link_libraries( ${CMAKE_PROJECT_NAME} Jde Jde.DB libJde.App.ServerLib.a )
if(	${USE_SHARED_LIBS} )
	target_link_libraries( ${CMAKE_PROJECT_NAME} Jde.Access Jde.App.Shared Jde.QL Jde.Web.Server Jde.Web.Client )
else()
	target_link_libraries( ${CMAKE_PROJECT_NAME} libJde.Access.a libJde.App.Shared.a libJde.Web.Server.a libJde.Crypto.a libJde.QL.a libJde.Web.Client.a )
endif()
	target_link_libraries( ${CMAKE_PROJECT_NAME} jsonnet++ )
	target_link_libraries( ${CMAKE_PROJECT_NAME} dl )
#	target_link_libraries( ${CMAKE_PROJECT_NAME} lzma )
	target_link_libraries( ${CMAKE_PROJECT_NAME} crypto )
	target_link_libraries( ${CMAKE_PROJECT_NAME} ssl )
	target_link_libraries( ${CMAKE_PROJECT_NAME} stdc++ )
endif()
target_link_libraries( ${CMAKE_PROJECT_NAME} protobuf::libprotobuf )
target_link_libraries( ${CMAKE_PROJECT_NAME} ZLIB::ZLIB )

if( MSVC )
	set( CUSTOM_RUNTIME_DIR $ENV{JDE_DIR}/AppServer/installed/$<CONFIGURATION> )
	install(TARGETS ${CMAKE_PROJECT_NAME}
		RUNTIME DESTINATION ${CUSTOM_RUNTIME_DIR})
	install( FILES $<TARGET_RUNTIME_DLLS:${CMAKE_PROJECT_NAME}> DESTINATION ${CUSTOM_RUNTIME_DIR} )
endif()